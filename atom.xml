<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reuben Castelino]]></title>
  <link href="http://projectdelphai.github.com/atom.xml" rel="self"/>
  <link href="http://projectdelphai.github.com/"/>
  <updated>2013-03-27T15:41:36-07:00</updated>
  <id>http://projectdelphai.github.com/</id>
  <author>
    <name><![CDATA[Reuben Castelino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TT-RSS on Heroku Part 2]]></title>
    <link href="http://projectdelphai.github.com/blog/2013/03/23/tt-rss-on-heroku-part-2/"/>
    <updated>2013-03-23T17:08:00-07:00</updated>
    <id>http://projectdelphai.github.com/blog/2013/03/23/tt-rss-on-heroku-part-2</id>
    <content type="html"><![CDATA[<p>This is my follow-up article to <a href="http://projectdelphai.github.com/blog/2013/03/15/replacing-google-reader-with-tt-rss-on-heroku/">Replacing Google Reader with TT-RSS on Heroku</a>. That article was just my quick notes on how I had set up tt-rss on Heroku as a quick transition from Google Reader. As with any project, nothing is ever perfect the first time and there were a lot of updates that I did until I was comfortable with the setup. Besides some small changes and bug fixes, the biggest two events would be the creation of a installation script and the addition of a self-updater. If I come across anything else, I&#8217;ll either post it at the end of this article or write a Part 3. I&#8217;m still debating.</p>

<!-- more -->


<h2>Cost</h2>

<p>I was indirectly alerted by Survector in <a href="http://projectdelphai.github.com/blog/2013/03/15/replacing-google-reader-with-tt-rss-on-heroku/#comment-834371937">his comment</a> that I might not have fully explained what Heroku was, its pricing, and its pros and cons. Heroku is a <a href="https://en.wikipedia.org/wiki/Platform_as_a_service">PAAS</a> (Platform As A Service) which allows developers to host their applications under free or premium accounts. Primarily used for Ruby on Rails projects, Heroku has support for many languages (and unofficial support for PHP which was used for ttrss). Each time a Heroku application is created, the developer is basically given a small computer that has 512 mb RAM running Ubuntu on which the application is run. This computer/server is called a dyno and it operates on a sequential basis meaning that it can only only task at a time. In my ttrss server, I created a Heroku application and gave one dyno the task of running the tt-rss server. Because I was only using one dyno, I was able to stay on the free tier: there were NO costs to run this server. This was nice, because the hosting was taken care of with no costs. Because it the server was only used by me, the dyno could handle the load and I had no need to upgrade.</p>

<h2>Emulating Google Reader</h2>

<p>Thanks to <a href="http://brasserie-seul.com/?Recipes&amp;nr=50">#6 on Jan&#8217;s post</a>, I was able to emulate the posts as it appeared on Google Reader where by clicking on an article, it would expand to show the feed article. This combined expandable view was much better than the default split view. This can be enabled in the preferences section. I have also started changing the css with my own custom css to have bigger text and more whitespace. There are plugins/patches on the tt-rss forum if you want to use a shortcut or you can use the customize button in the preferences. I first used the live css editor (available in chrome or firefox) to change up the layout and then copy and pasted it into the customize css option to save them. If you want a tutorial, ask in the comments and I&#8217;ll eventually provide one.</p>

<h2>Shell Script</h2>

<p>Inspired by a <a href="http://tt-rss.org/forum/viewtopic.php?f=16&amp;t=1360">post</a>  on the tt-rss forum in which who_me created a script that allows easy installation of tt-rss on openshift, I decided to make it easier to create tt-rss servers on Heroku. <a href="https://github.com/projectdelphai/ttrss-on-heroku">Hosted on github</a>, the script is pretty stable (hopefully). It&#8217;s just a bash script that runs through all the commands and should successfully create a server for you. I&#8217;ll occasionally update it with the correct version number. It sets up the server and a self-updating feature which will be explained later on.</p>

<h2>Procfile and web-boot.sh (bug)</h2>

<p>For some reason, the default httpd.conf for PHP files has a MaxClients of 1 meaning that only one person can connect to the server. Obviously, this can be a problem. So I had to change it using a custom worker. Workers are another name for the task that is assigned to a dyno. So I created a file called Procfile in the top directory and in it inserted this line</p>

<pre><code>web: sh www/web-boot.sh
</code></pre>

<p>This tells the Heroku dyno to run the web-boot.sh file instead of the default boot.sh file on Heroku&#8217;s root server. So obviously, the next step would be to create a web-boot.sh script. In the same directory as the Procfile, create a web-boot.sh file and put these lines in it:</p>

<pre><code>sed -i 's/^ServerLimit 1/ServerLimit 8/' /app/apache/conf/httpd.conf
sed -i 's/^MaxClients 1/MaxClients 8/' /app/apache/conf/httpd.conf

sh boot.sh
</code></pre>

<p>This tells Heroku to up the ServerLimit to 8 as well as the MaxClients. After that, run the default boot.sh file to start tt-rss. Pretty easy so far.</p>

<h2>Self-Updating</h2>

<p>This definitely was my greatest accomplishment so far. The problem here is that tt-rss doesn&#8217;t have a real-time updating solution like google reader did. This is basically because constantly polling for updates would take up a lot of resources that a self-hoster doesn&#8217;t want to do. And so tt-rss has a update.php script that can be run to update all feeds. tt-rss doesn&#8217;t have a built in update-all button, because if someone has a lot of feeds, it would take too long. For example, I have a little over 50 feeds and just importing them and updating them initially all took ~10 mins. Right now, after syncing it all, my feeds update at about a rate of 1/2 a second per article. This can be a problem to update over http because most servers (like Heroku) have a 30 second timeout. So while Jan&#8217;s post (mentioned above), does mention a url to update, Heroku times out and crashes the application. And when it crashes, it stays crashed for at least 5-10 mins-which is unacceptable. Previously, I had a cron job run every 5 mins to update the feeds, but if my computer was off, nothing would update and if I&#8217;m gone from home, I have no way to update everything.</p>

<p>But I couldn&#8217;t get Heroku to update the tt-rss server either. Heroku only allows one dyno per application on the free tier. If I had a worker dyno (background jobs) to my web dyno (application job), it would bump up the price to $34 per month which was way to much. And so I threw every idea I had at it, but nothing would work. The one idea I had that seemed the most profitable was to create another Heroku application that could somehow interface with my tt-rss server and remotely update it, but I had no idea how to do this.</p>

<p>After a couple of days of wrestling with it, I came across <a href="http://ar.zu.my/use-two-dynos-on-heroku-for-free/">this post</a> by arzumy which fully solved my problem. Basically, you have to create two applications in the same folder so that each folder. First create the first application like how we did in Part 1. Remember to use the Procfile and the web-boot.sh file this time instead. However, before you commit the changes to Heroku, add to the Procfile this line:</p>

<pre><code>worker: while true; do ./php/bin/php -c www/php.ini ./www/update.php -feeds; sleep 300; done
</code></pre>

<p>This adds a worker dyno which will run the update script every 5 mins. But someone smart is yelling at me, &#8220;Hey! You can only have one dyno!&#8221; And that person would be right. So here&#8217;s how to get around it. Push what you have to your heroku application so that works. Go to your tt-rss server online and make sure it works. If it does, we&#8217;re ready to move on.</p>

<p>In the same folder as your application, create a new application like this</p>

<pre><code>heroku apps:create \&lt;appname\&gt;-updater
</code></pre>

<p>Now you need to connect your new application to your old one. Forewarning, because you now have two applications created in the same folder, you always need to specify which app you&#8217;re talking about with &#8220;&#8211;app &lt;appname>. Grab the database url for the tt-rss server with</p>

<pre><code>heroku config --app \&lt;appname\&gt;
</code></pre>

<p>Copy and paste the database url into your new updater application as well as adding the proper environment variables.</p>

<pre><code>heroku config:add DATABASE_URL=\&lt;databaseurl\&gt; --app \&lt;appname\&gt;-updater
heroku config:add LD_LIBRARY_PATH=/app/php/ext:/app/apache/lib --app \&lt;appname\&gt;-updater
</code></pre>

<p>Now add the application repository to your git config with</p>

<pre><code>git remote add \&lt;appname\&gt;-updater git@heroku.com:\&lt;appname\&gt;-updater.git
</code></pre>

<p>Now push your data to your second application with</p>

<pre><code>git add .
git commit -m "initial commit"
git push \&lt;appname\&gt;-updater master
</code></pre>

<p>You might also want to push all your data to your ttrss server just in case with the same command as above just replacing the &lt;appname>-updater with heroku.</p>

<p>Now you need to assign your workers. Your first application will still only be using the web dyno as it was originally. However, Heroku has this ability where you can have one worker dyno instead of one web dyno and it is still totally free. So assign a worker dyno to your heroku config with</p>

<pre><code>heroku ps:scale worker=1 --app \&lt;appname\&gt;-updater
</code></pre>

<p>If everything worked out well (and I didn&#8217;t forget anything), you should now recieve updates every 5 minutes. You can check this by running</p>

<pre><code>heroku logs --app \&lt;appname\&gt;-updater
</code></pre>

<h2>New Versions</h2>

<p>So updating to the next version basically sucks. I&#8217;ve updated the scrip to 1.7.5 so newcomers should have no problems. For oldies who worked with previous versions, we have it tougher. There are two ways to do it. The easier way is to export your feeds, delete your apps in heroku, and recreate it with the script, and then importing it. However, if you&#8217;re sentimental like I am, and want to stick with your original setup, here&#8217;s how to do it.</p>

<p>First make sure that you have php and postgresql installed on your computer. The php installation must be able to work with the postgresql installation as well. In arch linux, its as easy as installing php-pgsql and uncommenting the necessary line in /etc/php/php.ini.</p>

<p>Then in your local tt-rss installation, in your config.php add updater to your plugins section near the end of the file. After that, run</p>

<pre><code>/usr/bin/php update.php -update_self
</code></pre>

<p>It should update your installation and create a folder up one directory of your old config. USING A SUDO COMMAND, transfer your git folder back into your tt-rss folder. This is important so that you don&#8217;t lose your important .git setup. Then run</p>

<pre><code>sudo chown -R \&lt;localuser\&gt;:users .git
</code></pre>

<p>so that you can edit the files like normal. Transfer your Procfile, web-boot.sh file and as well as any other files you might have edited. Then run git status to see all the changed files. Run</p>

<pre><code>git add .
git add -u
</code></pre>

<p>and then</p>

<pre><code>git status
</code></pre>

<p>to see if there are any more changes to be committed. That should be all of them. Then commit them</p>

<pre><code>git commit -m 'updated to 1.7.5'
</code></pre>

<p>and push it</p>

<pre><code>git commit heroku master
git commit \&lt;appname\&gt;-updater
</code></pre>

<p>I was definitely tired after trying to figure this out, and blasted through this walkthrough. If I missed anything, let me know and I&#8217;ll fix it. This is such a precarious update that I don&#8217;t want to try and automate it. If anyone can figure out how to successfully, I&#8217;ll be happy to include it in the ttrss-on-heroku repo for others to use.</p>

<p>Ironically, even though I was sentimental and wanted to keep my old setup, I screwed this section up so often, that I had to recreate my ttrss server ~5 times before I figured it out. So much for keepsakes.</p>

<h2>All Finished</h2>

<p>Now, I have a tt-rss server that self-updates and provides rss feeds for me whenever I need them. Besides, this version updating (which is technically not even necessary), I can consider this project sufficiently completed.</p>

<p>I&#8217;m pretty sure that I&#8217;ve cited all my external sources in the text above, but nevertheless: thanks to all who provided me with information and tutorials especially arzumy who in a couple of paragraphs solved all my updating woes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing Google Reader with TT-RSS on Heroku]]></title>
    <link href="http://projectdelphai.github.com/blog/2013/03/15/replacing-google-reader-with-tt-rss-on-heroku/"/>
    <updated>2013-03-15T14:25:00-07:00</updated>
    <id>http://projectdelphai.github.com/blog/2013/03/15/replacing-google-reader-with-tt-rss-on-heroku</id>
    <content type="html"><![CDATA[<p>As many probably know, Google Reader is slated to be <a href="http://googlereader.blogspot.com/2013/03/powering-down-google-reader.html">shut down</a> on July 1, 2013. I use Google Reader all the time and this came as a huge shock to me. My first instinct was to switch to something else such as <a href="http://www.feedly.com/">Feedly</a>. The problem is that I also use <a href="http://www.newsbeuter.org/">newsbeuter</a> as a desktop client which syncs with Google Reader. It only syncs with Google Reader, Bloglines (now dropped), and <a href="http://tt-rss.org/redmine/projects/tt-rss/wiki">Tiny Tiny RSS</a>. So naturally, I looked up Tiny Tiny RSS to see if I could migrate there. Unfortunately, ttrss (Tiny Tiny RSS) is supposed to be hosted on a server and I didn&#8217;t want to host it on my computer just for rss feeds. So I decided to host it on <a href="https://www.heroku.com/">Heroku</a>.</p>

<!-- more -->


<p>There is now a <a href="">part 2</a>.</p>

<h2>Update</h2>

<p>I did create recently create a shell script that can be found <a href="https://github.com/projectdelphai/ttrss-on-heroku">here</a> which will make it a lot easier for a person to quickly set up a ttrs-on-heroku server. If you&#8217;re just here to get a server, use that. If you want to learn more about the process and the background information, read ahead. I would at least skim ahead so that you have a basic understanding of what&#8217;s happening</p>

<hr >


<p>There were three routes I could have gone. I could have dropped newsbeuter and gone to another client, but I didn&#8217;t want to do that, because, frankly, newsbeuter is the mutt of rss readers. I also could have just worked with an online-only service, but again, I love newsbeuter. I see no need to drop it, because of Google&#8217;s choices. The last and what seemed to be the most viable was to use newsbeuter by itself with no online features. However, if I&#8217;m bored and at another computer (Windows, Linux, or Mac), I want to be able to read my feeds.</p>

<p>So I looked up ttrss. ttrss was an exceptional service because it was an application rather than a web-service. I&#8217;ve read many article that show the best Google Reader alternatives yet they were all web-based. The first thing I thought was, &#8220;What if they decide to shut down like Google Reader?&#8221; ttrss is unique in that it is hosted by the user. I would host the application myself and always have the data. Even if ttrss shut down and support was dropped, I would still have the application running by itself. And it was open-source so somehow it would always live on.</p>

<p>So I had to figure out a way to make ttrss work. I could always host it on my computer or even my <a href="http://www.raspberrypi.org/">raspberry pi</a>, but it seemed like an unnecessary waste of resources. I wanted it to be as simple as Google Reader was. I didn&#8217;t want to have to have my computer on all the time nor my internet connection especially if I was on a vacation or away from my computer. So I turned to online hosting - free online hosting that is.</p>

<p>I had dabbled with Heroku before with <a href="http://rubyonrails.org/">Ruby on Rails</a>, so I knew that it would work fine for my needs. While Heroku was primarily for Ruby on Rails applications, I remember reading that it had support for PHP which is what ttrss was written in. Here&#8217;s the process by which I managed to do it.</p>

<p>First, sign up for a heroku account and download the <a href="https://toolbelt.heroku.com/">heroku toolbelt</a> (if you don&#8217;t have <a href="http://git-scm.com/">git</a> installed as well, install it). You&#8217;ll also need to install <a href="http://www.postgresql.org/">postgresql</a> on your system so that you can set up the database for Heroku. You&#8217;ll also need to authenticate your heroku to allow it to upload and create applications.</p>

<pre><code>heroku login
</code></pre>

<p>and use your Heroku credentials. Create a folder that you will use to hold all your files. I named it like this &lt;username>-ttrss (so for me wmcscrooge-ttrss), just to create a standard. Throughout this article, if you chose a different name for your application, just replace &lt;username>-ttrss with your application name. In this folder, type</p>

<pre><code>git init
heroku create \&lt;username\&gt;-ttrss
</code></pre>

<p>The first command creates your repository of code that&#8217;ll hold all your data. Git is a great tool that manages your version history and I would strongly recommend looking into it if you don&#8217;t use it already. The second command create a heroku application and tells git where to upload the data to. From here, you&#8217;ll need to download the tarball from the ttrss website which holds all the application files. Extract all the files (tar -xvzf) and copy all the files inside the Tiny-Tiny-Rss-1.7.4 to the root directory of your &lt;username>-ttrss folder.</p>

<p>Now you need to create the database that Heroku/ttrss will use to hold your rss feed information. If you run</p>

<pre><code>heroku pg:info
</code></pre>

<p>inside your folder, you&#8217;ll notice that there is no database right now. So the first thing is to add one</p>

<pre><code>heroku addons:add heroku-postgresql:dev
</code></pre>

<p>You could always use a better database, but the basic dev plan is free and should be sufficient at first. ttrss also supports mysql databases, but postgres databases are preferred and you won&#8217;t really notice a difference if you have more experience in mysql (like I did). Now we need to look up some information on your databases. If you go to Heroku&#8217;s website, log in, and look at your applications, you will see your application logged there. You can open it if you want, but right now, there&#8217;s nothing there to see since you haven&#8217;t uploaded your application yet. All you&#8217;ll see is a welcome sign if you try and open your application. It is a good thing to check, however, that you do have a postgres database logged in the addons section, that you can open the application welcome page, and that you&#8217;re operating a cedar stack (which you should be by default).</p>

<p>The next thing is to move to the <a href="https://postgres.heroku.com/">postgres heroku page</a> to view your database information. You can login using your Heroku credentials. From there switch to the databases page and click on the database that matches with your site. It will have the format of &lt;username>-ttrss::&lt;databasenickname>. On your database page, record the Host name, the Database name, the User, and the Password (You&#8217;ll need to click show).</p>

<p>Move back to your application folder, and create a copy of the config.php-dist file and name it config.php. Open up the config.php file in your editor and change the values of DB_HOST to your Host name, DB_USER to your User name, DB_PASS to your Password, and uncomment the DB_PORT section and keep it as 5432. You can keep the DB_TYPE as pgsql since you&#8217;re using postgres instead of mysql. The last thing you&#8217;ll need to change here is the SELF_URL_PATH to</p>

<pre><code>http://\&lt;username\&gt;-ttrss.heroku.com/
</code></pre>

<p>Now you&#8217;re almost done. Move into the schema folder. The thing is that your heroku application has a blank database with no order or form to it. Instead of creating it by hand, ttrss has a schema file that can tell Heroku what the database should look like and you just need to import it. You&#8217;ll need to connect to Heroku&#8217;s remote database using postgres&#8217;s psql command. There are two ways to do it. The first way is the way I did it and the second is a way that I found out later. I haven&#8217;t used the second way but it seems easier (in that it&#8217;s not so much copy and pasting), but either way should work.</p>

<pre><code>psql -h \&lt;Host name\&gt; -U \&lt;User name\&gt; \&lt;Database name\&gt;
</code></pre>

<p>Your password will be your Database password. Then import the schema file with</p>

<pre><code>\i ttrss_schema_pgsql.sql
</code></pre>

<p>You will see a lot of text scroll by and once it&#8217;s finished you can exit with \q.</p>

<h2>Update</h2>

<p>I have actually changed my mind and fine that this is definitely without a doubt the easier way. Do this. Find your database nickname (something like pink or amber or some random noun) and then:</p>

<pre><code>heroku pg:psql \&lt;databasenickname\&gt; &lt; schema/ttrss_schema_pgsql.sql
</code></pre>

<p>This makes it much easier.</p>

<hr >


<p>Now you could upload the data and you should be done. If you do it however, you&#8217;ll find out that the application doesn&#8217;t run. A quick look through</p>

<pre><code>heroku logs
</code></pre>

<p>will reveal this error:</p>

<pre><code>PHP Fatal error:  Call to undefined function mb_internal_encoding() in /app/www/include/functions.php on line 19
</code></pre>

<p>Basically PHP doesn&#8217;t come with mbstring enabled and you need to compile it and install it for Heroku yourself. Thankfully its been already done for us. In a separate folder, download the necessary files</p>

<pre><code>git clone https://github.com/yandod/heroku-libraries.git    
</code></pre>

<p>Move into heroku-libraries/php/mbstring and copy both files (mbstring.so and example-php.ini) into your &lt;username>-ttrss root folder while renaming the example-php.ini file to php.ini.</p>

<p>Now you should be able to finish up. Go to the root folder (should be there anyway) and enter these commands to clean up your git repo and upload it to heroku.</p>

<pre><code>git add .
git commit -m 'Initial commit'
git push heroku master
</code></pre>

<p>Because I&#8217;ve used git before, I was able to push the files across easily. If it&#8217;s your first time, you may have a bit of trouble and I won&#8217;t be able to help you here as I cannot emulate a fresh install. A quick google search should help you if you run into any problems. Open your application with</p>

<pre><code>heroku open
</code></pre>

<p>which will launch it in your default browser or open it yourself with &lt;username>-ttrss.heroku.com. You should see a login screen come up. Log in with the default user:admin and pass:password. Change your password right after logging in. From here, you can explore the settings and manually add feeds as you want. Of course, since you&#8217;re migrating from Google Reader you&#8217;ll want to be able to import your feeds. In Google Reader you can export your data using Google Takeout. Once you&#8217;ve downloaded your data, extract the files and pull out the subscriptions.xml file. Rename it to subscriptions.opml and then import it using preferences>Feeds>OPML. Now you have a working Google Reader alternative where you have full control over everything.</p>

<p> The only issue is that everything doesn&#8217;t automatically update. If you want to update your feeds, you either have to do it manually per feed, use SIMPLE_UPDATE_MODE, or write a script to update your feeds. In your config.php you can change SIMPLE_UPDATE_MODE to true and upload the changed config to Heroku which should slowly update your feeds one by one on its own, however, this will only work if you have ttrss open in your browser. I did not try this method and have no input on how well it works. Instead I chose to write a script. Heroku has a function using</p>

<pre><code>heroku run bash
</code></pre>

<p>where you basically have a sort of ssh feature into your data in your application. Using this you can run the update.php file every x minutes. First to enable some shared libraries, run</p>

<pre><code>heroku config:add LD_LIBRARY_PATH=/app/php/ext:/app/apache/lib 
</code></pre>

<p>Then I created a bash script that says</p>

<pre><code>#! /bin/sh
cd /home/&lt;user&gt;/path/to/ttrss/folder
heroku run './php/bin/php -c www/php.ini ./www/update.php -feeds'
</code></pre>

<p>This tells heroku to run an update (./www.update.php) using php (./php/bin/php) with mbstring enabled (-c www/php.ini). I placed this script in /usr/local/bin after</p>

<pre><code>chmod +x \&lt;filename\&gt;
</code></pre>

<p>and ran it to see if it worked. After it successfully ran, I create a cron script so that it would run every 30 minutes.</p>

<pre><code>crontab -e
</code></pre>

<p>which opens up the cron file and then added in</p>

<pre><code>*/30 * * * * /usr/local/bin/\&lt;filename\&gt;
</code></pre>

<p>You can change the 30 minutes to whatever you want though I would not make it any less especially if you&#8217;re low on resources. I am still figuring out if I can get Heroku to run this script without my computer, but that&#8217;s a work in progress.</p>

<p>From here I can access ttrss from any browser, from my computer (using newsbeuter which I won&#8217;t document here; use the git version if you&#8217;re going to use it), and from a phone (I believe there&#8217;s an android app, not sure though).</p>

<p>I realize that the faulty part of this method is Heroku as at any point, Heroku could shut down as well, but that&#8217;s not the point. There are multiple other free hosting sites that I could have used. I looked at appfog.com for instance and <a href="http://www.quora.com/Is-there-anything-like-Heroku-I-can-use-for-a-PHP-site">this page</a> has a ton of other resources as well. It may even be possible to get it running on github pages. But ttrss is built so that as long as I have a place to host it, I can easily migrate the installation and that&#8217;s what makes it great.</p>

<h2>Thanks</h2>

<p>I used a lot of articles/web sites without which, this would not have been possible. Though they may not realize that they helped me, I would like to acknowledge as many of them as I can remember. In no particular order (until I figure out footnotes and become less lazy):</p>

<ol>
<li>Nathan Willis for his great <a href="https://www.linux.com/learn/tutorials/322446-weekend-project-replacing-google-reader-with-tiny-tiny-rss">starting article</a> that led me through much of the basics.</li>
<li>Jan for some more specific <a href="http://brasserie-seul.com/?Recipes&amp;nr=50">choices in preferences</a> especially #6</li>
<li>who_me for his <a href="http://tt-rss.org/forum/viewtopic.php?f=16&amp;t=1360">post</a> on the tt-rss forum which motivated me to create the shell script.</li>
<li>Heroku for their great hosting and informative wiki/documentation.</li>
<li>Tiny Tiny RSS for a great open-source software</li>
<li>manish_s and Dan McClain for their posts <a href="http://stackoverflow.com/questions/10691766/how-do-i-connect-to-my-heroku-shared-database-for-postgresql">here</a> and <a href="http://stackoverflow.com/questions/11797217/how-do-i-update-psql">here</a> which helped with setting up the database.</li>
<li>Yandod for explaining <a href="http://en.blog.candycane.jp/2012/04/11/running-php-on-heroku-with-mbstring/">how to set up mbstring on heroku</a> without which would probably have halted the development of this project.</li>
<li>friism for his <a href="http://stackoverflow.com/questions/14389140/trying-to-run-php-file-using-heroku-run-and-i-get-bash-permission-denied">post</a> on how to enable some shared libraries for the update script.</li>
<li>For <a href="http://stackoverflow.com/questions/6289506/can-i-run-bash-scripts-on-my-heroku-account">this post</a> which led me to <a href="https://news.ycombinator.com/item?id=2602728">this post</a> which really helped understand how to set up the update script.</li>
<li>At last, but not least for <a href="https://github.com/mozz100">Richard Morrison</a> who <a href="https://github.com/projectdelphai/ttrss-on-heroku/pull/1">helped me</a> remember about the shared libraries for the update script (and why its a good idea to record everything) and for finding bugs in my script which I hadn&#8217;t thought about.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Feed for Medium]]></title>
    <link href="http://projectdelphai.github.com/blog/2013/02/15/creating-a-feed-for-medium/"/>
    <updated>2013-02-15T15:47:00-08:00</updated>
    <id>http://projectdelphai.github.com/blog/2013/02/15/creating-a-feed-for-medium</id>
    <content type="html"><![CDATA[<p>More and more often, I&#8217;ve found myself reading posts from <a href="http://www.medium.com">Medium</a>. It is a relatively new site (still in closed beta for writers) that was created to be a &#8220;place for ideas&#8221;. While at first, it may seem a lot like sites such as reddit or Hacker News, it&#8217;s a lot different as well. It&#8217;s different in that it feels like a magazine. I enjoy reading the articles on Medium and it looks beautiful. From what I&#8217;ve heard, writing in Medium is great as well, to the point that one writer said that he wrote emails in it just because of how much he enjoyed the UI. It also deviates from just technology articles. While it has those, it also contains articles that just express ideas or thoughts that have occurred to people. No matter the content, however, the writing is how all posts should be written: easy-to-read, thought out, and creative.</p>

<!-- more -->


<p>So after realizing how much I enjoyed reading articles from Medium, I looked for the rss feed. I hate going to sites every day to check on new posts and so Google Reader and newsbeuter have become essential. And I found what I believe is one of Medium&#8217;s largest flaws: it doesn&#8217;t have one collective feed. Instead it has multiple feeds for its collections (think tags). So I was faced with the dilemma of what to do; I wasn&#8217;t willing to hear about great article through 3rd parties, yet I would not remember and refused to check every day. I turned to <a href="http://www.feed43.com">Feed43</a>.</p>

<p>I&#8217;m sure there are better options out there, but Feed43 has helped me when I need quick solutions and I haven&#8217;t invested the time needed to find a better one. Here&#8217;s a guide written as to how I created a basic feed so that others can learn how and so that I can remember how when I inevitably need to make more feeds.</p>

<p>NOTE: Feed43 does have a limit to the number of queries it can make along with other limitations. However, until further notice, it is the best and easiest service for me.</p>

<p>I like Feed43, because I can create the feed myself based on a site&#8217;s HTML source rather than relying on an automatic service. After signing in, I created a new feed and agreed to the terms of service. Then, I filled in which site I wanted to create a feed from and viewed the html source as seen below. <br></p>

<p><img src="http://projectdelphai.github.com/assets/images/Medium_Feed/Step_1.jpg" alt="Step 1" /></p>

<p>I&#8217;ve always used % for the global search pattern to the point that I don&#8217;t even know if something else is accepted. There are probably more options and limitations, but for my purposes, % has always worked. The key to the Item Search Pattern is to find the essential html code that corresponds to the posts on the main page of your site. Here is where you will need to know some basic HTML. I would suggest going out and learned at least some basics before you try this. I believe that you could puzzle it out with some logic, but you can get pretty lost finding out where you need to be. So I knew the first post title was called &#8220;I&#8217;m a Mac. You&#8217;re a PC&#8230;&#8221;. So I scrolled down until I found that part in the extracted source. By comparing the code between post titles, I noticed that the post title would appear shortly after</p>

<pre><code>&lt;h3 class="post-item-title"&gt;
</code></pre>

<p>After that, I isolated the article link to the href after the h3 header, the title to the title tag, and the brief summary to the paragraph tag shortly after that. From there I copied that bit of code into the Items Search Pattern box replacing the parts where the important information was with %. Any bits that were not essential to identifying where in the code I was, I replaced with a *. This means that there&#8217;s a lot of code there, but feed43 doesn&#8217;t have to pay attention to that and can skip it until the next important part. This is what the final product looked like.</p>

<p><img src="http://projectdelphai.github.com/assets/images/Medium_Feed/Step_2.jpg" alt="Step 1" /></p>

<p>From there, it was a simple matter of just filling in the fields, with the necessary information and % numbers. The hardest part is definitely Step 2. Here you you can see how I finished up. I previewed the rss to make sure it worked out fine, renamed the feed, and then added it to google reader.</p>

<p><img src="http://projectdelphai.github.com/assets/images/Medium_Feed/Step_3.jpg" alt="Step 1" /></p>

<p><img src="http://projectdelphai.github.com/assets/images/Medium_Feed/Step_4.jpg" alt="Step 1" /></p>

<p>From here, I&#8217;ve been thinking of where to go. While this method works, it isn&#8217;t very helpful to deploy. I can&#8217;t exactly share the feed, because I doubt that many people can use the same feed without it shutting down. Another option I&#8217;ve been thinking of is to use github or heroku to create the xml file and spew the items back whenever google reader queries for new information. I know ruby has a way of creating rss feeds so it might be possible with heroku. Sooner or later, I&#8217;ll see into creating a website that can store multiple, custom rss links. It may work, it may not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aliases]]></title>
    <link href="http://projectdelphai.github.com/blog/2013/01/28/aliases/"/>
    <updated>2013-01-28T23:05:00-08:00</updated>
    <id>http://projectdelphai.github.com/blog/2013/01/28/aliases</id>
    <content type="html"><![CDATA[<p>So right now I&#8217;m not sure whether to post whenever I think of an alias or bashrc function or to collect them all here. For now, I&#8217;ll just add to this post as I think of them. While not technically aliases, I&#8217;ll mostly include functions that I&#8217;ve placed in bashrc because to me, they serve the same purpose: they fulfill a certain requirement with less typing.</p>

<!-- more -->


<p><strong>Backup File</strong></p>

<p>Renames file argument to <filename>.tmp to preserve a copy then renames file argument to <filename>.bk as backup. Finally it renames temp file to original filename as experiment file</p>

<pre><code>function bk() {
    cp $1 $1.tmp
    mv $1 $1.bk
    mv $1.tmp $1
}
</code></pre>

<p><strong>Deploy Octopress Site Changes</strong></p>

<p>This one is used to deploy any changes to my site. After creating a post or changing the html/css, I just have to type in &#8220;deploy &#8216;&lt;git commit message&#8217;&#8221; and itwill publish the changes. It first generates the site and then deploys it. The next half adds all changed files, adds a commit message, and pushes to my github. The hardest part is just remembering to add that commit argument.</p>

<pre><code>function deploy() {
    rake generate;
    rake deploy;
    git add .;
    git commit -m $1;
    git push origin source;
  }
</code></pre>

<p><strong>Aliases</strong></p>

<p>View any usb drives that were plugged in. The later they appear, the later they were plugged in or registered.</p>

<pre><code>alias vdev='dmesg | grep -o "sd[a-z]" | uniq | tail'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test]]></title>
    <link href="http://projectdelphai.github.com/blog/2013/01/26/test/"/>
    <updated>2013-01-26T19:25:00-08:00</updated>
    <id>http://projectdelphai.github.com/blog/2013/01/26/test</id>
    <content type="html"><![CDATA[<p>This is just a test</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus dui nunc, sollicitudin vitae vulputate sit amet, sagittis ac dolor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur in urna augue, quis cursus dui. Nulla mattis tincidunt nulla, quis posuere tellus feugiat sit amet. Integer eu augue enim, ut tempor nunc. Donec aliquam leo quis libero suscipit viverra. Integer volutpat gravida luctus. In rutrum ligula et sapien blandit congue. Aliquam id arcu quam, eget sodales nibh.</p>

<!-- more -->


<p>Etiam gravida pellentesque lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris eleifend leo et nulla pretium nec semper libero vestibulum. Praesent blandit lacinia enim nec euismod. Nunc tortor felis, pharetra at faucibus eget, scelerisque sit amet ligula. Integer euismod tellus eget est posuere fermentum. Phasellus hendrerit dictum dolor, quis auctor metus consequat sit amet. Pellentesque at erat a diam tincidunt tincidunt. Sed risus ligula, hendrerit sit amet pellentesque et, venenatis eu mauris.</p>

<iframe src='http://embed.verite.co/timeline/?source=0Ap8p1jFuRKLvdE1IQVhNRmVDUFU1Y0F0SUNyTnQxVFE&font=Bevan-PotanoSans&maptype=toner&lang=en&height=650' width='100%' height='650' frameborder='0'></iframe>


<p>Praesent quis sapien vulputate turpis gravida consequat vel vel eros. Donec cursus, ipsum sed imperdiet ornare, lectus dolor varius orci, non imperdiet quam leo a diam. Pellentesque fringilla, magna non pretium tempor, eros mauris sollicitudin enim, eget pellentesque lectus velit eget magna. Quisque fringilla lorem ut enim convallis commodo. Nulla facilisi. Curabitur vestibulum dui quis massa fringilla tristique. Nulla ullamcorper tempor condimentum.</p>

<p>Nunc bibendum, risus eget imperdiet venenatis, justo nisl venenatis mi, a vulputate quam felis a dui. Cras magna eros, sodales ut laoreet vel, malesuada dapibus enim. Phasellus mollis, nisl vitae placerat fermentum, turpis tellus lacinia velit, eu viverra est risus pulvinar leo. Pellentesque commodo velit quis odio auctor eget dignissim libero ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cras sodales, eros id aliquam pulvinar, felis turpis pellentesque ante, eu convallis metus nulla at nisl. Nullam vel ante in leo egestas sollicitudin ut eu mi. Mauris vitae urna nunc. Fusce rutrum bibendum venenatis. Mauris rutrum feugiat dolor, eu sodales sapien lacinia at.</p>

<p>Curabitur vitae felis ac elit gravida pellentesque sit amet ut turpis. Nunc consequat pulvinar nibh, a fringilla enim hendrerit vel. Vivamus et eleifend purus. Praesent suscipit pretium porttitor. Mauris feugiat massa eget diam lacinia facilisis. Donec at elit enim. Fusce vulputate metus in sapien consectetur pharetra. Vivamus sodales mattis metus, a pulvinar nibh pretium nec. Morbi nec dui id neque egestas vestibulum accumsan quis mauris. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Cras non eros sit amet eros fermentum euismod. Duis pretium tortor id nunc volutpat tincidunt.</p>
]]></content>
  </entry>
  
</feed>
